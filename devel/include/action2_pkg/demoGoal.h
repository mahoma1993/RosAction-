// Generated by gencpp from file action2_pkg/demoGoal.msg
// DO NOT EDIT!


#ifndef ACTION2_PKG_MESSAGE_DEMOGOAL_H
#define ACTION2_PKG_MESSAGE_DEMOGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action2_pkg
{
template <class ContainerAllocator>
struct demoGoal_
{
  typedef demoGoal_<ContainerAllocator> Type;

  demoGoal_()
    : count(0)  {
    }
  demoGoal_(const ContainerAllocator& _alloc)
    : count(0)  {
  (void)_alloc;
    }



   typedef int32_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::action2_pkg::demoGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action2_pkg::demoGoal_<ContainerAllocator> const> ConstPtr;

}; // struct demoGoal_

typedef ::action2_pkg::demoGoal_<std::allocator<void> > demoGoal;

typedef boost::shared_ptr< ::action2_pkg::demoGoal > demoGoalPtr;
typedef boost::shared_ptr< ::action2_pkg::demoGoal const> demoGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action2_pkg::demoGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action2_pkg::demoGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action2_pkg::demoGoal_<ContainerAllocator1> & lhs, const ::action2_pkg::demoGoal_<ContainerAllocator2> & rhs)
{
  return lhs.count == rhs.count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action2_pkg::demoGoal_<ContainerAllocator1> & lhs, const ::action2_pkg::demoGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action2_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::action2_pkg::demoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action2_pkg::demoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action2_pkg::demoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action2_pkg::demoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action2_pkg::demoGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action2_pkg::demoGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action2_pkg::demoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "602d642babe509c7c59f497c23e716a9";
  }

  static const char* value(const ::action2_pkg::demoGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x602d642babe509c7ULL;
  static const uint64_t static_value2 = 0xc59f497c23e716a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::action2_pkg::demoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action2_pkg/demoGoal";
  }

  static const char* value(const ::action2_pkg::demoGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action2_pkg::demoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"int32 count\n"
;
  }

  static const char* value(const ::action2_pkg::demoGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action2_pkg::demoGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct demoGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action2_pkg::demoGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action2_pkg::demoGoal_<ContainerAllocator>& v)
  {
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION2_PKG_MESSAGE_DEMOGOAL_H
